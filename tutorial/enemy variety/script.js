//document.addEventListener('DOMContentLoaded '//fires when the initial html document has been loaded and parsed. But it doesn't wait for css and images    )
//load is the correct thing



document.addEventListener('DOMContentLoaded', function(){

const canvas = document.getElementById('canvas1');
const ctx = canvas.getContext('2d');
canvas.width = 500;
canvas.height = 700;




class Game{
    constructor(ctx, width, height){
        this.ctx=ctx;
        this.width=width;
        this.height =height;
        this.enemies = [];
        this.#addNewEnemy();
        console.log(this.enemies);


    }
    update(){
        this.enemies.forEach(object => object.update());

    }

    draw(){
        this.enemies.forEach(object => object.draw());

    }
    #addNewEnemy(){//a private method

        this.enemies.push(new Enemy(this));//passing this keyword allows us to pass everything inside the constructor of the game class




    }
}

class Enemy{
    constructor(game){
        this.game= game;
        console.log(this.game); 
        this.x=this.game.width;//will be at the start of the canvas // so that canvas knows where to draw them on canvas
        this.y=Math.random() * this.game.height;
        this.width=100;
        this.height=100;

    }
    update(){
        this.x--;//moves the enemy one pixel to the left of the canvas


    }
    draw(){
        ctx.fillRect(this.x, this.y, this.width, this.height);


    }

}

const game = new Game(ctx, canvas.width, canvas.height);    
let lastTime=1;
function animate(timeStamp){//timeStamp arguement is automatically generated by requestAnimationFrame
    ctx.clearRect(0,0, canvas.width, canvas.height);
    //some code
    //difference in frames in animation is called deltatime
    const deltaTime =timeStamp-lastTime;
    lastTime= timeStamp;
    //console.log(deltaTime);
    game.update();
    game.draw();
    requestAnimationFrame(animate);
};


animate(0);


});